import javax.swing.*;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import java.awt.*;
import java.awt.event.*;

public class Main {

    //  TODO: add toolbar for picking/adding races
    private JPanel contentPane;
    private JTextPane raceText; // TODO: add formatting for shown text, race position
    private JTextField playerInput;
    private JButton startButton;
    private JButton restartButton;
    private WpmCounter wpmCounter;
    private RaceTimer raceTimer;

    private Race currentRace;

    private static final String FILE_NAME = "TheDarkKnight.txt";

    public Main() {
        currentRace = new Race(RaceTextReader.getInstance().readFile(FILE_NAME));
        raceText.setText(currentRace.getRaceText());

        setupListeners();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Sanic Type");
        frame.setContentPane(new Main().contentPane);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void setupListeners() {
        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!raceTimer.isRunning()) {
                    wpmCounter.reset();

                    raceTimer.setLastTick(System.currentTimeMillis());
                    raceTimer.start();

                    playerInput.setEditable(true);
                    playerInput.requestFocus();
                }

            }
        });

        restartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                raceTimer.restart();
                currentRace.reset();
                wpmCounter.reset();

                playerInput.setEditable(false);
                playerInput.setText("");

                startButton.requestFocus();
            }
        });

        playerInput.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent caretEvent) {

                // using invokeLater because CaretListener or DocumentListener throw mutation in notification exception
                // and KeyListener executes before text field is changed

                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        if (playerInput.isEditable()) {
                            if (currentRace.next(playerInput.getText())) {
                                wpmCounter.increment();
                                wpmCounter.count(raceTimer.getSeconds());
                                playerInput.setText("");

                                if (currentRace.isFinished()) {
                                    raceTimer.stop();
                                    playerInput.setEditable(false);
                                    playerInput.setText("");

                                    currentRace.reset();
                                    restartButton.requestFocus();
                                }
                            }
                        }
                    }
                });
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setMinimumSize(new Dimension(406, 200));
        contentPane.setOpaque(false);
        contentPane.setPreferredSize(new Dimension(406, 200));
        contentPane.setBorder(BorderFactory.createTitledBorder(""));
        startButton = new JButton();
        startButton.setText("Start");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        contentPane.add(startButton, gbc);
        restartButton = new JButton();
        restartButton.setText("Restart");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        contentPane.add(restartButton, gbc);
        raceTimer = new RaceTimer();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        contentPane.add(raceTimer, gbc);
        wpmCounter = new WpmCounter();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        contentPane.add(wpmCounter, gbc);
        playerInput = new JTextField();
        playerInput.setEditable(false);
        playerInput.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(playerInput, gbc);
        raceText = new JTextPane();
        raceText.setEditable(false);
        raceText.setEnabled(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(raceText, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}